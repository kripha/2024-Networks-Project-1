#!/usr/bin/env python3.10
from socket import *
import sys

# ./dns_server <topo-dir> <log> <listen-port> <decision-method>
topo_dir = sys.argv[1] 
logfile_name = sys.argv[2] 
listen_port = int(sys.argv[3])
decision_method = sys.argv[4]

#TODO: find the IP address it should listen on
topo_num = topo_dir[-1]
dns_ip = ""
with open(f"{topo_dir}/topo{topo_num}.dns", 'r') as file:
    dns_ip = file.readline()
print(dns_ip)
# dns_ip = 5.0.0.1
# build and bind server to a port number
serverSocket = socket(AF_INET, SOCK_DGRAM)
serverSocket.bind((dns_ip , listen_port))

RD = 0
RA = 0
Z = 0
NSCOUNT = 0
ARCOUNT = 0

#TODO: find the video server addresses
servers_ips = []
with open(f"{topo_dir}/topo{topo_num}.servers", 'r') as file:
    for line in file:
        servers_ips.append(line.strip())

# Receiving message from client
while True:
    clientMessage = b""
    msg, clientaddr = serverSocket.recvfrom(2048)
    if msg.decode() == 0:
        # we've reached the end of query
        clientMessage += msg
        break
    elif not msg:
        # client broke
        break
# query name is 2 bytes
query_name = clientMessage[12:14] # starts after 12 bytes of header
print(clientMessage)
print(query_name.decode())

#TODO: log
#TODO: find best webserver
print("Received Message from Client: ", clientMessage.decode())

# Modifying the message
clientMessage = clientMessage.decode().upper()

print("Sending Message to Client: ", clientMessage)

# Sending the encoded modified message back to the client
serverSocket.sendto(clientMessage.encode(), clientAddress)

# serverSocket.close()
# AA	Set this to 0 in requests, 1 in responses.
# RD	Set this to 0 in all messages.
# RA	Set this to 0 in all messages.
# Z 	Set this to 0 in all messages.
# NSCOUNT	Set this to 0 in all messages.
# ARCOUNT	Set this to 0 in all messages.
# QTYPE	Set this to 1 in all requests (asking for an A record).
# QCLASS	Set this to 1 in all requests (asking for an IP address).
# TYPE	Set this to 1 in all responses (returning an A record).
# CLASS	Set this to 1 in all responses (returning an IP address).
# TTL	Set this to 0 in all responses (no caching).

